/* eslint-disable no-restricted-syntax */
const constants = require('./constants');
const MysqlHandler = require('./MysqlHandler');

let settings;
let mysqlHandler;

const storageModule = {
  init(_settings) {
    settings = _settings;
    if (
      settings.storageModuleOptions == null ||
      settings.storageModuleOptions.sqlConfig == null
    ) {
      throw new Error(
        "MySQL storage module's required parameters are not defined"
      );
    }

    this.tableNames = Object.assign(constants.DefaultTableNames);
    if (settings.storageModuleOptions.tableNames != null) {
      for (const settingsColName of Object.keys(
        settings.storageModuleOptions.tableNames
      )) {
        this.tableNames[settingsColName] =
          settings.storageModuleOptions.tableNames[settingsColName];
      }
    }

    this.collectionNames = Object.assign(constants.DefaultTableNames);
    if (settings.storageModuleOptions.collectionNames != null) {
      for (const settingsColName of Object.keys(
        settings.storageModuleOptions.collectionNames
      )) {
        this.collectionNames[settingsColName] =
          settings.storageModuleOptions.collectionNames[settingsColName];
      }
    }

    mysqlHandler = new MysqlHandler(settings.storageModuleOptions.sqlConfig);
    return mysqlHandler.connect();
  },

  getFlows() {
    return mysqlHandler.findAll(mysqlHandler.Flows);
  },

  saveFlows(flows) {
    let objects = flows.map(flow => ({ JsonData: JSON.stringify(flow) }));
    return mysqlHandler.saveAll(mysqlHandler.Flows, objects);
  },

  getCredentials() {
    return mysqlHandler.findAll(mysqlHandler.Credentials);
  },

  saveCredentials(credentials) {
    return mysqlHandler.saveAll(mysqlHandler.Credentials, credentials);
  },

  getSettings() {
    // mysqlHandler.findAll(this.tableNames.settings).then(res => {
    //   console.log(res)
    // });
    // return mysqlHandler.findAll(this.tableNames.settings)
    return mysqlHandler.findOne(mysqlHandler.Settings)
  },
  saveSettings(setting) {
    let objects = [{"JsonData": JSON.stringify(setting)}];
    mysqlHandler.saveAll(mysqlHandler.Settings, objects);  
  },
  getSessions() {
    return mysqlHandler.findAll(mysqlHandler.Sessions);
  },
  saveSessions(sessions) {
    let objects = sessions.map(session => ({ JsonData: JSON.stringify(session) }));
    return mysqlHandler.saveAll(mysqlHandler.Sessions, objects);
  },

  getLibraryEntry(type, path) {
    return mysqlHandler.findLibraryEntry(mysqlHandler.Library, type, path);
  },

  saveLibraryEntry(type, path, meta, body) {
    return mysqlHandler.saveLibraryEntry(
      mysqlHandler.Library,
      type,
      path,
      meta,
      body
    );
  }
};

module.exports = storageModule;
