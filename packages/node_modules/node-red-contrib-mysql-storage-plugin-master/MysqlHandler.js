/* eslint-disable no-await-in-loop */
const when = require('when');
const Promise = when.promise;
const sql = require('mysql');
const mysql2 = require('mysql2/promise');
const Sequelize = require("sequelize");


const MysqlHandler = class MysqlHandler {
  constructor(sqlConfig) {
    this.sequelize =new Sequelize(sqlConfig.database, sqlConfig.user,sqlConfig.password, {
      host: sqlConfig.host,
      port: sqlConfig.port,
      dialect: 'mysql',
      pool: {
          max: 10,
          min: 0
      }
  });
  this.Credentials = require("./model/credentials.model.js")(this.sequelize);
  this.Library = require("./model/library.model.js")(this.sequelize);
  this.Sessions = require("./model/sessions.model.js")(this.sequelize);
  this.Settings = require("./model/settings.model.js")(this.sequelize);
  this.Flows = require("./model/flows.model.js")(this.sequelize);
  }

  async connect() {
    // 连接数据库
    let connection2 = await mysql2.createConnection({
        host: '114.115.207.1',
        port: '13306',
        user: 'root',
        password: 'Hollysys4321!',
      });
    // 初始化数据库
    await connection2.query(`    CREATE DATABASE IF NOT EXISTS node_red;`);
    connection2.close()

    return Promise((resolve, reject) => {
      try {
        this.sequelize.sync();
        resolve();
      } catch (err) {
        reject(err);
      }
    });
  }

  findAll(modelT) {
    return Promise(async (resolve, reject) => {
      modelT.findAll({attributes: ['JsonData']}).then(records => {
        resolve(records);
      })
      .catch(error => {
        reject(error);
      });
    });
  }

  findOne(modelT) {
    return Promise(async (resolve, reject) => {
      modelT.findAll({attributes: ['JsonData']}).then(records => {
        if(records[0]){
          resolve(JSON.parse(records[0].JsonData));
        }else{
          resolve({});
        }
        resolve(records);
      })
      .catch(error => {
        reject(error);
      });
    });
  }
  saveAll(modelT, objects) {
    return Promise(async (resolve, reject) => {
      // 清空表（删除所有记录）
      modelT.destroy({ truncate: true })
      .then(() => {
        console.log('表清空成功');
        modelT.bulkCreate(objects).then(createdUsers => {
          resolve()
          console.log('批量创建成功:');
        })
        .catch(error => {
          reject(error);
        });
      })
      .catch(error => {
        console.error('表清空失败:', error);
      });
    });
  }

  findLibraryEntry(tableName, type, path) {
    return Promise(async (resolve, reject) => {
      
    });
  }

  saveLibraryEntry(tableName, type, path, meta, body) {
    return Promise((resolve, reject) => {
    });
  }
};

module.exports = MysqlHandler;
